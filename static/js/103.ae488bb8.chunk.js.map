{"version":3,"sources":["sketches/040_rotation_headpain/shaders/frag.glsl"],"names":[],"mappings":"4GAAA,OAAe","file":"static/js/103.ae488bb8.chunk.js","sourcesContent":["export default \"#version 300 es\\n#ifdef GL_ES\\n    precision highp float;\\n    precision highp int;\\n    precision mediump sampler3D;\\n#define GLSLIFY 1\\n#endif\\n#define HW_PERFORMANCE 1\\nuniform vec3      iResolution;\\nuniform float     iTime;\\nuniform float     iChannelTime[4];\\nuniform vec4      iMouse;\\nuniform vec4      iDate;\\nuniform float     iSampleRate;\\nuniform vec3      iChannelResolution[4];\\nuniform int       iFrame;\\nuniform float     iTimeDelta;\\nuniform float     iFrameRate;\\nstruct Channel {\\n    vec3  resolution;\\n    float time;\\n};\\nuniform Channel iChannel[4];\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform sampler2D iChannel3;\\nvoid mainImage( out vec4 c, in vec2 f );\\n\\n// --------- START-SHADER-TOY-CODE-HERE ------------\\n\\n// Original one hosted on https://www.shadertoy.com/view/3tlGRr\\n\\n#define SIZE 15.0\\n#define HPI 1.5707963\\n#define COL1 vec3(32, 43, 51) / 255.0\\n#define COL2 vec3(235, 241, 245) / 255.0\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x;\\n    float hsm = 1.5 / iResolution.y * SIZE * 0.5; // Half-Smooth factor\\n\\n    uv *= SIZE; // Make grid\\n    vec2 id = floor(uv);\\n    uv = fract(uv) - 0.5;\\n\\n    float angle = iTime; // Prepare rotation matrix\\n\\n    float phase = mod(floor(angle / HPI), 2.0); // Determine what phase is right now\\n\\n    float mask = 0.0;\\n    for(float y =- 1.0; y <= 1.0; y++ ) { // Loop to draw neighbour cells\\n        for(float x =- 1.0; x <= 1.0; x++ ) {\\n            vec2 ruv = uv + vec2(x, y);\\n            vec2 rid = id + vec2(x, y);\\n\\n            // Golfed Rotation https://www.shadertoy.com/view/XlsyWX\\n            ruv *= mat2(cos( angle + vec4(0,33,11,0)));\\n\\n            vec2 maskXY = smoothstep(0.5 + hsm, 0.5 - hsm, abs(ruv));\\n            float maskI = maskXY.x*maskXY.y;\\n\\n            vec2 idm = mod(rid, 2.0);\\n            float draw = abs(idm.x*idm.y + (1.-idm.x)*(1.-idm.y) - phase); // Flip depending on phase\\n\\n            mask += maskI * draw;\\n        }\\n    }\\n\\n    vec3 col = vec3(1.0);\\n    col = mix(COL1, COL2, abs(mask - phase)); // Color flip depending on phase\\n\\n    fragColor = vec4(col, 1.0);\\n}\\n\\n// --------- END-SHADER-TOY-CODE-HERE ------------\\n\\nout vec4 outColor;\\nvoid main( void ) {\\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\\n    mainImage( color, gl_FragCoord.xy );\\n    color.w = 1.0;\\n    outColor = color;\\n}\\n\";"],"sourceRoot":""}