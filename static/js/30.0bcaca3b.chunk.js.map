{"version":3,"sources":["../node_modules/defined/index.js","../node_modules/canvas-sketch-util/lib/wrap.js","../node_modules/canvas-sketch-util/math.js","utils/ctx.js","sketches/012_hypno_multi_spiral/index.js"],"names":["module","exports","i","arguments","length","undefined","value","from","to","TypeError","t","cycle","Math","floor","defined","require","wrap","EPSILON","Number","clamp","min","max","lerp","inverseLerp","abs","toFinite","n","defaultValue","isFinite","expandVector","dims","p","scalar","out","lerpArray","newArray","initialValue","push","mod","a","b","damp","lambda","dt","exp","fract","sign","degToRad","PI","radToDeg","pingPong","linspace","opts","endpoint","offset","map","_","lerpFrames","values","len","whole","frame","nextFrame","Array","isArray","clamp01","v","smoothstep","x","dampArray","mapRange","inputMin","inputMax","outputMin","outputMax","outVal","expand2D","expand3D","expand4D","setDrawPolygon","context","lineCoords","closePath","beginPath","moveTo","lineTo","drawLine","stroke","sketch","width","height","margin","sx","sy","time","fillStyle","fillRect","lines","line","j","cos","sin","forEach","settings","dimensions","animate"],"mappings":"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","file":"static/js/30.0bcaca3b.chunk.js","sourcesContent":["module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","module.exports = wrap;\nfunction wrap (value, from, to) {\n  if (typeof from !== 'number' || typeof to !== 'number') {\n    throw new TypeError('Must specify \"to\" and \"from\" arguments as numbers');\n  }\n  // algorithm from http://stackoverflow.com/a/5852628/599884\n  if (from > to) {\n    var t = from;\n    from = to;\n    to = t;\n  }\n  var cycle = to - from;\n  if (cycle === 0) {\n    return to;\n  }\n  return value - cycle * Math.floor((value - from) / cycle);\n}\n","var defined = require('defined');\nvar wrap = require('./lib/wrap');\nvar EPSILON = Number.EPSILON;\n\nfunction clamp (value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value);\n}\n\nfunction clamp01 (v) {\n  return clamp(v, 0, 1);\n}\n\nfunction lerp (min, max, t) {\n  return min * (1 - t) + max * t;\n}\n\nfunction inverseLerp (min, max, t) {\n  if (Math.abs(min - max) < EPSILON) return 0;\n  else return (t - min) / (max - min);\n}\n\nfunction smoothstep (min, max, t) {\n  var x = clamp(inverseLerp(min, max, t), 0, 1);\n  return x * x * (3 - 2 * x);\n}\n\nfunction toFinite (n, defaultValue) {\n  defaultValue = defined(defaultValue, 0);\n  return typeof n === 'number' && isFinite(n) ? n : defaultValue;\n}\n\nfunction expandVector (dims) {\n  if (typeof dims !== 'number') throw new TypeError('Expected dims argument');\n  return function (p, defaultValue) {\n    defaultValue = defined(defaultValue, 0);\n    var scalar;\n    if (p == null) {\n      // No vector, create a default one\n      scalar = defaultValue;\n    } else if (typeof p === 'number' && isFinite(p)) {\n      // Expand single channel to multiple vector\n      scalar = p;\n    }\n\n    var out = [];\n    var i;\n    if (scalar == null) {\n      for (i = 0; i < dims; i++) {\n        out[i] = toFinite(p[i], defaultValue);\n      }\n    } else {\n      for (i = 0; i < dims; i++) {\n        out[i] = scalar;\n      }\n    }\n    return out;\n  };\n}\n\nfunction lerpArray (min, max, t, out) {\n  out = out || [];\n  if (min.length !== max.length) {\n    throw new TypeError('min and max array are expected to have the same length');\n  }\n  for (var i = 0; i < min.length; i++) {\n    out[i] = lerp(min[i], max[i], t);\n  }\n  return out;\n}\n\nfunction newArray (n, initialValue) {\n  n = defined(n, 0);\n  if (typeof n !== 'number') throw new TypeError('Expected n argument to be a number');\n  var out = [];\n  for (var i = 0; i < n; i++) out.push(initialValue);\n  return out;\n}\n\nfunction linspace (n, opts) {\n  n = defined(n, 0);\n  if (typeof n !== 'number') throw new TypeError('Expected n argument to be a number');\n  opts = opts || {};\n  if (typeof opts === 'boolean') {\n    opts = { endpoint: true };\n  }\n  var offset = defined(opts.offset, 0);\n  if (opts.endpoint) {\n    return newArray(n).map(function (_, i) {\n      return n <= 1 ? 0 : ((i + offset) / (n - 1));\n    });\n  } else {\n    return newArray(n).map(function (_, i) {\n      return (i + offset) / n;\n    });\n  }\n}\n\nfunction lerpFrames (values, t, out) {\n  t = clamp(t, 0, 1);\n\n  var len = values.length - 1;\n  var whole = t * len;\n  var frame = Math.floor(whole);\n  var fract = whole - frame;\n\n  var nextFrame = Math.min(frame + 1, len);\n  var a = values[frame % values.length];\n  var b = values[nextFrame % values.length];\n  if (typeof a === 'number' && typeof b === 'number') {\n    return lerp(a, b, fract);\n  } else if (Array.isArray(a) && Array.isArray(b)) {\n    return lerpArray(a, b, fract, out);\n  } else {\n    throw new TypeError('Mismatch in value type of two array elements: ' + frame + ' and ' + nextFrame);\n  }\n}\n\nfunction mod (a, b) {\n  return ((a % b) + b) % b;\n}\n\nfunction degToRad (n) {\n  return n * Math.PI / 180;\n}\n\nfunction radToDeg (n) {\n  return n * 180 / Math.PI;\n}\n\nfunction fract (n) {\n  return n - Math.floor(n);\n}\n\nfunction sign (n) {\n  if (n > 0) return 1;\n  else if (n < 0) return -1;\n  else return 0;\n}\n\n// Specific function from Unity / ofMath, not sure its needed?\n// function lerpWrap (a, b, t, min, max) {\n//   return wrap(a + wrap(b - a, min, max) * t, min, max)\n// }\n\nfunction pingPong (t, length) {\n  t = mod(t, length * 2);\n  return length - Math.abs(t - length);\n}\n\nfunction damp (a, b, lambda, dt) {\n  return lerp(a, b, 1 - Math.exp(-lambda * dt));\n}\n\nfunction dampArray (a, b, lambda, dt, out) {\n  out = out || [];\n  for (var i = 0; i < a.length; i++) {\n    out[i] = damp(a[i], b[i], lambda, dt);\n  }\n  return out;\n}\n\nfunction mapRange (value, inputMin, inputMax, outputMin, outputMax, clamp) {\n  // Reference:\n  // https://openframeworks.cc/documentation/math/ofMath/\n  if (Math.abs(inputMin - inputMax) < EPSILON) {\n    return outputMin;\n  } else {\n    var outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);\n    if (clamp) {\n      if (outputMax < outputMin) {\n        if (outVal < outputMax) outVal = outputMax;\n        else if (outVal > outputMin) outVal = outputMin;\n      } else {\n        if (outVal > outputMax) outVal = outputMax;\n        else if (outVal < outputMin) outVal = outputMin;\n      }\n    }\n    return outVal;\n  }\n}\n\nmodule.exports = {\n  mod: mod,\n  fract: fract,\n  sign: sign,\n  degToRad: degToRad,\n  radToDeg: radToDeg,\n  wrap: wrap,\n  pingPong: pingPong,\n  linspace: linspace,\n  lerp: lerp,\n  lerpArray: lerpArray,\n  inverseLerp: inverseLerp,\n  lerpFrames: lerpFrames,\n  clamp: clamp,\n  clamp01: clamp01,\n  smoothstep: smoothstep,\n  damp: damp,\n  dampArray: dampArray,\n  mapRange: mapRange,\n  expand2D: expandVector(2),\n  expand3D: expandVector(3),\n  expand4D: expandVector(4)\n};\n","export function setDrawPolygon(context, lineCoords, closePath = false) {\n  context.beginPath();\n  for (let i = 0; i < lineCoords.length; i += 1) {\n    const p = lineCoords[i];\n    if (i === 0) {\n      context.moveTo(p[0], p[1]);\n    } else {\n      context.lineTo(p[0], p[1]);\n    }\n  }\n  if (closePath) {\n    context.closePath();\n  }\n}\n\nexport const drawLine = (context, lineCoords, closePath = false) => {\n  setDrawPolygon(context, lineCoords, closePath);\n  context.stroke();\n};\n\nexport function setPixel(imgData, x, y, cR, cG, cB, cA = 255) {\n  const n = (~~x + ~~y * imgData.width) * 4;\n\n  imgData.data[n] = ~~cR;\n  imgData.data[n + 1] = ~~cG;\n  imgData.data[n + 2] = ~~cB;\n  imgData.data[n + 3] = ~~cA;\n}\n\nconst resultGetPixelArray = [0, 0, 0, 0];\nexport function getPixel(imgData, x, y, colorNumber) {\n  const n = (~~x + ~~y * imgData.width) * 4;\n\n  if (colorNumber !== undefined) {\n    return imgData.data[n + colorNumber];\n  }\n\n  for (let i = 0; i < 4; i += 1) {\n    resultGetPixelArray[i] = n + i;\n  }\n  return resultGetPixelArray;\n}\n","import { lerp } from 'canvas-sketch-util/math';\nimport { drawLine } from '@/utils/ctx';\n\nconst settings = {\n  dimensions: [1024, 1024],\n  animate: true,\n};\n\nconst sketch = async ({ width, height }) => {\n  const margin = width * 0.01;\n\n  const sx = v => lerp(margin, width - margin, v);\n  const sy = v => lerp(margin, height - margin, v);\n\n  return ({ context, width, height, time }) => {\n    context.fillStyle = 'hsl(0, 0%, 98%)';\n    context.fillRect(0, 0, width, height);\n\n    const lines = [];\n\n    for (let i = -Math.PI; i < Math.PI; i += Math.PI / 32) {\n      const line = [];\n\n      line.push([0.5, 0.5]);\n      for (let j = 0.01; j < 0.5; j += 0.1) {\n        line.push([\n          Math.cos(i + Math.cos(time + i) + j * 20) * j + 0.5,\n          Math.sin(i + Math.cos(time + i) + j * 20) * j + 0.5,\n        ]);\n      }\n\n      lines.push(line);\n    }\n\n    lines.forEach(line => {\n      line = line.map(p => [sx(p[0]), sy(p[1])]);\n      drawLine(context, line);\n    });\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}