{"version":3,"sources":["../node_modules/canvas-sketch-util/lib/wrap.js","../node_modules/canvas-sketch-util/math.js","sketches/002_maze/index.js"],"names":["module","exports","value","from","to","TypeError","t","cycle","Math","floor","defined","require","wrap","EPSILON","Number","clamp","min","max","lerp","inverseLerp","abs","toFinite","n","defaultValue","isFinite","expandVector","dims","p","scalar","i","out","lerpArray","length","newArray","initialValue","push","mod","a","b","damp","lambda","dt","exp","fract","sign","degToRad","PI","radToDeg","pingPong","linspace","opts","endpoint","offset","map","_","lerpFrames","values","len","whole","frame","nextFrame","Array","isArray","clamp01","v","smoothstep","x","dampArray","mapRange","inputMin","inputMax","outputMin","outputMax","outVal","expand2D","expand3D","expand4D","sketch","maxLines","MAX_SAFE_INTEGER","prevTime","context","width","height","time","matrix","fill","cellsAround","lines","iterations","success","tries","cellsCounter","y","firstCellFound","iy","ix","random","rangeFloor","completedLine","foundCell","shuffle","cA","size","fillStyle","fillRect","margin","lineWidth","forEach","line","beginPath","px","py","arc","strokeStyle","pointIdx","moveTo","lineTo","stroke","settings","dimensions","animate"],"mappings":"4FAAAA,EAAOC,QACP,SAAeC,EAAOC,EAAMC,GAC1B,GAAoB,kBAATD,GAAmC,kBAAPC,EACrC,MAAM,IAAIC,UAAU,qDAGtB,GAAIF,EAAOC,EAAI,CACb,IAAIE,EAAIH,EACRA,EAAOC,EACPA,EAAKE,EAEP,IAAIC,EAAQH,EAAKD,EACjB,GAAc,IAAVI,EACF,OAAOH,EAET,OAAOF,EAAQK,EAAQC,KAAKC,OAAOP,EAAQC,GAAQI,K,oBCfrD,IAAIG,EAAUC,EAAQ,KAClBC,EAAOD,EAAQ,KACfE,EAAUC,OAAOD,QAErB,SAASE,EAAOb,EAAOc,EAAKC,GAC1B,OAAOD,EAAMC,EACRf,EAAQc,EAAMA,EAAMd,EAAQe,EAAMA,EAAMf,EACxCA,EAAQe,EAAMA,EAAMf,EAAQc,EAAMA,EAAMd,EAO/C,SAASgB,EAAMF,EAAKC,EAAKX,GACvB,OAAOU,GAAO,EAAIV,GAAKW,EAAMX,EAG/B,SAASa,EAAaH,EAAKC,EAAKX,GAC9B,OAAIE,KAAKY,IAAIJ,EAAMC,GAAOJ,EAAgB,GAC7BP,EAAIU,IAAQC,EAAMD,GAQjC,SAASK,EAAUC,EAAGC,GAEpB,OADAA,EAAeb,EAAQa,EAAc,GACjB,kBAAND,GAAkBE,SAASF,GAAKA,EAAIC,EAGpD,SAASE,EAAcC,GACrB,GAAoB,kBAATA,EAAmB,MAAM,IAAIrB,UAAU,0BAClD,OAAO,SAAUsB,EAAGJ,GAElB,IAAIK,EADJL,EAAeb,EAAQa,EAAc,GAE5B,MAALI,EAEFC,EAASL,EACa,kBAANI,GAAkBH,SAASG,KAE3CC,EAASD,GAGX,IACIE,EADAC,EAAM,GAEV,GAAc,MAAVF,EACF,IAAKC,EAAI,EAAGA,EAAIH,EAAMG,IACpBC,EAAID,GAAKR,EAASM,EAAEE,GAAIN,QAG1B,IAAKM,EAAI,EAAGA,EAAIH,EAAMG,IACpBC,EAAID,GAAKD,EAGb,OAAOE,GAIX,SAASC,EAAWf,EAAKC,EAAKX,EAAGwB,GAE/B,GADAA,EAAMA,GAAO,GACTd,EAAIgB,SAAWf,EAAIe,OACrB,MAAM,IAAI3B,UAAU,0DAEtB,IAAK,IAAIwB,EAAI,EAAGA,EAAIb,EAAIgB,OAAQH,IAC9BC,EAAID,GAAKX,EAAKF,EAAIa,GAAIZ,EAAIY,GAAIvB,GAEhC,OAAOwB,EAGT,SAASG,EAAUX,EAAGY,GAEpB,GAAiB,kBADjBZ,EAAIZ,EAAQY,EAAG,IACY,MAAM,IAAIjB,UAAU,sCAE/C,IADA,IAAIyB,EAAM,GACDD,EAAI,EAAGA,EAAIP,EAAGO,IAAKC,EAAIK,KAAKD,GACrC,OAAOJ,EA0CT,SAASM,EAAKC,EAAGC,GACf,OAASD,EAAIC,EAAKA,GAAKA,EA+BzB,SAASC,EAAMF,EAAGC,EAAGE,EAAQC,GAC3B,OAAOvB,EAAKmB,EAAGC,EAAG,EAAI9B,KAAKkC,KAAKF,EAASC,IA+B3CzC,EAAOC,QAAU,CACfmC,IAAKA,EACLO,MAtDF,SAAgBrB,GACd,OAAOA,EAAId,KAAKC,MAAMa,IAsDtBsB,KAnDF,SAAetB,GACb,OAAIA,EAAI,EAAU,EACTA,EAAI,GAAW,EACZ,GAiDZuB,SAhEF,SAAmBvB,GACjB,OAAOA,EAAId,KAAKsC,GAAK,KAgErBC,SA7DF,SAAmBzB,GACjB,OAAW,IAAJA,EAAUd,KAAKsC,IA6DtBlC,KAAMA,EACNoC,SA5CF,SAAmB1C,EAAG0B,GAEpB,OADA1B,EAAI8B,EAAI9B,EAAY,EAAT0B,GACJA,EAASxB,KAAKY,IAAId,EAAI0B,IA2C7BiB,SA/GF,SAAmB3B,EAAG4B,GAEpB,GAAiB,kBADjB5B,EAAIZ,EAAQY,EAAG,IACY,MAAM,IAAIjB,UAAU,sCAE3B,mBADpB6C,EAAOA,GAAQ,MAEbA,EAAO,CAAEC,UAAU,IAErB,IAAIC,EAAS1C,EAAQwC,EAAKE,OAAQ,GAClC,OAAIF,EAAKC,SACAlB,EAASX,GAAG+B,KAAI,SAAUC,EAAGzB,GAClC,OAAOP,GAAK,EAAI,GAAMO,EAAIuB,IAAW9B,EAAI,MAGpCW,EAASX,GAAG+B,KAAI,SAAUC,EAAGzB,GAClC,OAAQA,EAAIuB,GAAU9B,MAkG1BJ,KAAMA,EACNa,UAAWA,EACXZ,YAAaA,EACboC,WAhGF,SAAqBC,EAAQlD,EAAGwB,GAC9BxB,EAAIS,EAAMT,EAAG,EAAG,GAEhB,IAAImD,EAAMD,EAAOxB,OAAS,EACtB0B,EAAQpD,EAAImD,EACZE,EAAQnD,KAAKC,MAAMiD,GACnBf,EAAQe,EAAQC,EAEhBC,EAAYpD,KAAKQ,IAAI2C,EAAQ,EAAGF,GAChCpB,EAAImB,EAAOG,EAAQH,EAAOxB,QAC1BM,EAAIkB,EAAOI,EAAYJ,EAAOxB,QAClC,GAAiB,kBAANK,GAA+B,kBAANC,EAClC,OAAOpB,EAAKmB,EAAGC,EAAGK,GACb,GAAIkB,MAAMC,QAAQzB,IAAMwB,MAAMC,QAAQxB,GAC3C,OAAOP,EAAUM,EAAGC,EAAGK,EAAOb,GAE9B,MAAM,IAAIzB,UAAU,iDAAmDsD,EAAQ,QAAUC,IAiF3F7C,MAAOA,EACPgD,QA3LF,SAAkBC,GAChB,OAAOjD,EAAMiD,EAAG,EAAG,IA2LnBC,WA/KF,SAAqBjD,EAAKC,EAAKX,GAC7B,IAAI4D,EAAInD,EAAMI,EAAYH,EAAKC,EAAKX,GAAI,EAAG,GAC3C,OAAO4D,EAAIA,GAAK,EAAI,EAAIA,IA8KxB3B,KAAMA,EACN4B,UA7CF,SAAoB9B,EAAGC,EAAGE,EAAQC,EAAIX,GACpCA,EAAMA,GAAO,GACb,IAAK,IAAID,EAAI,EAAGA,EAAIQ,EAAEL,OAAQH,IAC5BC,EAAID,GAAKU,EAAKF,EAAER,GAAIS,EAAET,GAAIW,EAAQC,GAEpC,OAAOX,GAyCPsC,SAtCF,SAAmBlE,EAAOmE,EAAUC,EAAUC,EAAWC,EAAWzD,GAGlE,GAAIP,KAAKY,IAAIiD,EAAWC,GAAYzD,EAClC,OAAO0D,EAEP,IAAIE,GAAWvE,EAAQmE,IAAaC,EAAWD,IAAaG,EAAYD,GAAaA,EAUrF,OATIxD,IACEyD,EAAYD,EACVE,EAASD,EAAWC,EAASD,EACxBC,EAASF,IAAWE,EAASF,GAElCE,EAASD,EAAWC,EAASD,EACxBC,EAASF,IAAWE,EAASF,IAGnCE,GAuBTC,SAAUjD,EAAa,GACvBkD,SAAUlD,EAAa,GACvBmD,SAAUnD,EAAa,K,8EC3DV,WAAEoD,OAzIF,WACb,IAEMC,EAAWhE,OAAOiE,iBAIpBC,GAAY,GAEhB,OAAO,YAAuC,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAChC,KAAIA,EAAOJ,EAAW,GAAtB,CAGAA,EAAWI,EAcX,IAZA,IAAMC,EAAS,IAAIxB,MAdR,IAcoByB,KAAK,MAAMjC,KAAI,kBAAM,IAAIQ,MAd7C,IAcyDyB,KAAK,MAEnEC,EAAc,CAClB,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,IAGAC,EAAQ,GAEVC,EAAa,EACVA,EAAaX,GAAU,CAG5B,IAFA,IAAIY,GAAU,EACVC,EAAQ,GACJD,GAAS,CACf,IAAIE,EAAe,EAEf1B,OAAC,EACD2B,OAAC,EACL,GAAIF,EAlCG,GAkCe,CAEpB,IADA,IAAIG,GAAiB,EACZC,EAAK,EAAGA,EApCZ,KAqCCD,EADsBC,GAAM,EAIhC,IAAK,IAAIC,EAAK,EAAGA,EAxCd,GAwCyBA,GAAM,EAChC,IAAKX,EAAOU,GAAIC,GAAK,CACnBH,EAAIE,EACJ7B,EAAI8B,EAEJF,GAAiB,EACjB,MAIN,IAAKA,EAAgB,CAEnBL,EAAaX,EAAW,EACxBY,GAAU,EACV,YAGFxB,EAAI+B,IAAOC,WAAW,EAzDjB,IA0DLL,EAAII,IAAOC,WAAW,EA1DjB,IA6DP,GAAKb,EAAOQ,GAAG3B,GAgCbyB,GAAS,MAhCQ,CACjBC,GAAgB,EAChBP,EAAOQ,GAAG3B,GAAK0B,EACfJ,EAAMC,GAAc,CAAC,CAACI,EAAG3B,IAGzB,IADA,IAAIiC,GAAgB,GACZA,GAAe,CACrB,IAAIC,GAAY,EADK,uBAErB,YAAiBH,IAAOI,QAAQd,GAAhC,+CAA8C,CAAC,IAApCe,EAAmC,QAC5C,KAAMT,EAAIS,EAAG,IAtEZ,IAsE0BT,EAAIS,EAAG,GAAK,GAAKpC,EAAIoC,EAAG,GAtElD,IAsE+DpC,EAAIoC,EAAG,GAAK,KACrEjB,EAAOQ,EAAIS,EAAG,IAAIpC,EAAIoC,EAAG,IAAK,CACjCV,GAAgB,EAChBC,GAAKS,EAAG,GACRpC,GAAKoC,EAAG,GACRjB,EAAOQ,GAAG3B,GAAK0B,EACfJ,EAAMC,GAAYtD,KAAK,CAAC0D,EAAG3B,IAEvB0B,GA3EEW,OA4EJJ,GAAgB,GAElBC,GAAY,EACZ,QAfe,kFAmBhBA,IACHD,GAAgB,GAIpBT,GAAU,GAMdD,GAAc,EAGhBR,EAAQuB,UAAY,kBACpBvB,EAAQwB,SAAS,EAAG,EAAGvB,EAAOC,GAE9B,IAAMuB,EAAiB,GAARxB,EAEfD,EAAQ0B,UAAqB,GAARzB,EAzGV,GA2GXM,EAAMoB,SAAQ,SAAAC,GAEZ,GADA5B,EAAQ6B,YACY,IAAhBD,EAAK7E,OAAc,CACrBiD,EAAQ6B,YACR,IAAMC,EAAK7F,eAAKwF,EAAQxB,EAAQwB,EAAQG,EAAK,GAAG,GA/GzC,IAgHDG,EAAK9F,eAAKwF,EAAQvB,EAASuB,EAAQG,EAAK,GAAG,GAhH1C,IAkHP5B,EAAQuB,UAAY,UACpBvB,EAAQgC,IAAIF,EAAIC,EAAI/B,EAAQ0B,UAAY,IAAK,EAAa,EAAVnG,KAAKsC,IAAQ,GAC7DmC,EAAQK,YAERL,EAAQ6B,YACR7B,EAAQiC,YAAc,UACtBL,EAAKD,SAAQ,WAASO,GAAc,IAAD,mBAApBtB,EAAoB,KAAjB3B,EAAiB,KAC3B6C,EAAK7F,eAAKwF,EAAQxB,EAAQwB,EAAQxC,EAzHnC,IA0HC8C,EAAK9F,eAAKwF,EAAQvB,EAASuB,EAAQb,EA1HpC,IA4HY,IAAbsB,EACFlC,EAAQmC,OAAOL,EAAIC,GAEnB/B,EAAQoC,OAAON,EAAIC,MAGvB/B,EAAQqC,eAMSC,SA9IR,CACfC,WAAY,CAAC,KAAM,MACnBC,SAAS","file":"static/js/33.ecaf0fd9.chunk.js","sourcesContent":["module.exports = wrap;\nfunction wrap (value, from, to) {\n  if (typeof from !== 'number' || typeof to !== 'number') {\n    throw new TypeError('Must specify \"to\" and \"from\" arguments as numbers');\n  }\n  // algorithm from http://stackoverflow.com/a/5852628/599884\n  if (from > to) {\n    var t = from;\n    from = to;\n    to = t;\n  }\n  var cycle = to - from;\n  if (cycle === 0) {\n    return to;\n  }\n  return value - cycle * Math.floor((value - from) / cycle);\n}\n","var defined = require('defined');\nvar wrap = require('./lib/wrap');\nvar EPSILON = Number.EPSILON;\n\nfunction clamp (value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value);\n}\n\nfunction clamp01 (v) {\n  return clamp(v, 0, 1);\n}\n\nfunction lerp (min, max, t) {\n  return min * (1 - t) + max * t;\n}\n\nfunction inverseLerp (min, max, t) {\n  if (Math.abs(min - max) < EPSILON) return 0;\n  else return (t - min) / (max - min);\n}\n\nfunction smoothstep (min, max, t) {\n  var x = clamp(inverseLerp(min, max, t), 0, 1);\n  return x * x * (3 - 2 * x);\n}\n\nfunction toFinite (n, defaultValue) {\n  defaultValue = defined(defaultValue, 0);\n  return typeof n === 'number' && isFinite(n) ? n : defaultValue;\n}\n\nfunction expandVector (dims) {\n  if (typeof dims !== 'number') throw new TypeError('Expected dims argument');\n  return function (p, defaultValue) {\n    defaultValue = defined(defaultValue, 0);\n    var scalar;\n    if (p == null) {\n      // No vector, create a default one\n      scalar = defaultValue;\n    } else if (typeof p === 'number' && isFinite(p)) {\n      // Expand single channel to multiple vector\n      scalar = p;\n    }\n\n    var out = [];\n    var i;\n    if (scalar == null) {\n      for (i = 0; i < dims; i++) {\n        out[i] = toFinite(p[i], defaultValue);\n      }\n    } else {\n      for (i = 0; i < dims; i++) {\n        out[i] = scalar;\n      }\n    }\n    return out;\n  };\n}\n\nfunction lerpArray (min, max, t, out) {\n  out = out || [];\n  if (min.length !== max.length) {\n    throw new TypeError('min and max array are expected to have the same length');\n  }\n  for (var i = 0; i < min.length; i++) {\n    out[i] = lerp(min[i], max[i], t);\n  }\n  return out;\n}\n\nfunction newArray (n, initialValue) {\n  n = defined(n, 0);\n  if (typeof n !== 'number') throw new TypeError('Expected n argument to be a number');\n  var out = [];\n  for (var i = 0; i < n; i++) out.push(initialValue);\n  return out;\n}\n\nfunction linspace (n, opts) {\n  n = defined(n, 0);\n  if (typeof n !== 'number') throw new TypeError('Expected n argument to be a number');\n  opts = opts || {};\n  if (typeof opts === 'boolean') {\n    opts = { endpoint: true };\n  }\n  var offset = defined(opts.offset, 0);\n  if (opts.endpoint) {\n    return newArray(n).map(function (_, i) {\n      return n <= 1 ? 0 : ((i + offset) / (n - 1));\n    });\n  } else {\n    return newArray(n).map(function (_, i) {\n      return (i + offset) / n;\n    });\n  }\n}\n\nfunction lerpFrames (values, t, out) {\n  t = clamp(t, 0, 1);\n\n  var len = values.length - 1;\n  var whole = t * len;\n  var frame = Math.floor(whole);\n  var fract = whole - frame;\n\n  var nextFrame = Math.min(frame + 1, len);\n  var a = values[frame % values.length];\n  var b = values[nextFrame % values.length];\n  if (typeof a === 'number' && typeof b === 'number') {\n    return lerp(a, b, fract);\n  } else if (Array.isArray(a) && Array.isArray(b)) {\n    return lerpArray(a, b, fract, out);\n  } else {\n    throw new TypeError('Mismatch in value type of two array elements: ' + frame + ' and ' + nextFrame);\n  }\n}\n\nfunction mod (a, b) {\n  return ((a % b) + b) % b;\n}\n\nfunction degToRad (n) {\n  return n * Math.PI / 180;\n}\n\nfunction radToDeg (n) {\n  return n * 180 / Math.PI;\n}\n\nfunction fract (n) {\n  return n - Math.floor(n);\n}\n\nfunction sign (n) {\n  if (n > 0) return 1;\n  else if (n < 0) return -1;\n  else return 0;\n}\n\n// Specific function from Unity / ofMath, not sure its needed?\n// function lerpWrap (a, b, t, min, max) {\n//   return wrap(a + wrap(b - a, min, max) * t, min, max)\n// }\n\nfunction pingPong (t, length) {\n  t = mod(t, length * 2);\n  return length - Math.abs(t - length);\n}\n\nfunction damp (a, b, lambda, dt) {\n  return lerp(a, b, 1 - Math.exp(-lambda * dt));\n}\n\nfunction dampArray (a, b, lambda, dt, out) {\n  out = out || [];\n  for (var i = 0; i < a.length; i++) {\n    out[i] = damp(a[i], b[i], lambda, dt);\n  }\n  return out;\n}\n\nfunction mapRange (value, inputMin, inputMax, outputMin, outputMax, clamp) {\n  // Reference:\n  // https://openframeworks.cc/documentation/math/ofMath/\n  if (Math.abs(inputMin - inputMax) < EPSILON) {\n    return outputMin;\n  } else {\n    var outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);\n    if (clamp) {\n      if (outputMax < outputMin) {\n        if (outVal < outputMax) outVal = outputMax;\n        else if (outVal > outputMin) outVal = outputMin;\n      } else {\n        if (outVal > outputMax) outVal = outputMax;\n        else if (outVal < outputMin) outVal = outputMin;\n      }\n    }\n    return outVal;\n  }\n}\n\nmodule.exports = {\n  mod: mod,\n  fract: fract,\n  sign: sign,\n  degToRad: degToRad,\n  radToDeg: radToDeg,\n  wrap: wrap,\n  pingPong: pingPong,\n  linspace: linspace,\n  lerp: lerp,\n  lerpArray: lerpArray,\n  inverseLerp: inverseLerp,\n  lerpFrames: lerpFrames,\n  clamp: clamp,\n  clamp01: clamp01,\n  smoothstep: smoothstep,\n  damp: damp,\n  dampArray: dampArray,\n  mapRange: mapRange,\n  expand2D: expandVector(2),\n  expand3D: expandVector(3),\n  expand4D: expandVector(4)\n};\n","import random from 'canvas-sketch-util/random';\nimport { lerp } from 'canvas-sketch-util/math';\n\nconst settings = {\n  dimensions: [2048, 2048],\n  animate: true,\n};\n\nconst sketch = () => {\n  const size = 40;\n  const maxTries = size;\n  const maxLines = Number.MAX_SAFE_INTEGER;\n  const maxLineLength = size * size;\n\n\n  let prevTime = -10;\n\n  return ({ context, width, height, time }) => {\n    if (time - prevTime < 2) {\n      return;\n    }\n    prevTime = time;\n\n    const matrix = new Array(size).fill(null).map(() => new Array(size).fill(0));\n\n    const cellsAround = [\n      [-1, 0],\n      [1, 0],\n      [0, -1],\n      [0, 1],\n    ];\n\n    const lines = [];\n\n    let iterations = 0;\n    while (iterations < maxLines) {\n      let success = false;\n      let tries = 0;\n      while (!success) {\n        let cellsCounter = 0;\n\n        let x;\n        let y;\n        if (tries > maxTries) {\n          let firstCellFound = false;\n          for (let iy = 0; iy < size; iy += 1) {\n            if (firstCellFound) {\n              break;\n            }\n            for (let ix = 0; ix < size; ix += 1) {\n              if (!matrix[iy][ix]) {\n                y = iy;\n                x = ix;\n\n                firstCellFound = true;\n                break;\n              }\n            }\n          }\n          if (!firstCellFound) {\n            // Global stop procedure\n            iterations = maxLines + 1;\n            success = true;\n            break;\n          }\n        } else {\n          x = random.rangeFloor(0, size);\n          y = random.rangeFloor(0, size);\n        }\n\n        if (!matrix[y][x]) {\n          cellsCounter += 1;\n          matrix[y][x] = cellsCounter;\n          lines[iterations] = [[y, x]];\n\n          let completedLine = false;\n          while (!completedLine) {\n            let foundCell = false;\n            for (const cA of random.shuffle(cellsAround)) {\n              if (!(y + cA[0] >= size || y + cA[0] < 0 || x + cA[1] > size || x + cA[1] < 0)) {\n                if (!matrix[y + cA[0]][x + cA[1]]) {\n                  cellsCounter += 1;\n                  y += cA[0];\n                  x += cA[1];\n                  matrix[y][x] = cellsCounter;\n                  lines[iterations].push([y, x]);\n\n                  if (cellsCounter >= maxLineLength) {\n                    completedLine = true;\n                  }\n                  foundCell = true;\n                  break;\n                }\n              }\n            }\n            if (!foundCell) {\n              completedLine = true;\n            }\n          }\n\n          success = true;\n        } else {\n          tries += 1;\n        }\n      }\n\n      iterations += 1;\n    }\n\n    context.fillStyle = 'hsl(0, 0%, 98%)';\n    context.fillRect(0, 0, width, height);\n\n    const margin = width * 0.1;\n\n    context.lineWidth = (width * 0.4) / size;\n\n    lines.forEach(line => {\n      context.beginPath();\n      if (line.length === 1) {\n        context.beginPath();\n        const px = lerp(margin, width - margin, line[0][1] / size);\n        const py = lerp(margin, height - margin, line[0][0] / size);\n\n        context.fillStyle = '#DB3737';\n        context.arc(px, py, context.lineWidth / 1.5, 0, Math.PI * 2, false);\n        context.fill();\n      } else {\n        context.beginPath();\n        context.strokeStyle = '#202B33';\n        line.forEach(([y, x], pointIdx) => {\n          const px = lerp(margin, width - margin, x / size);\n          const py = lerp(margin, height - margin, y / size);\n\n          if (pointIdx === 0) {\n            context.moveTo(px, py);\n          } else {\n            context.lineTo(px, py);\n          }\n        });\n        context.stroke();\n      }\n    });\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}