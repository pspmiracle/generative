{"version":3,"sources":["../node_modules/canvas-sketch-util/lib/wrap.js","../node_modules/canvas-sketch-util/math.js","sketches/005_color_daub/index.js"],"names":["module","exports","value","from","to","TypeError","t","cycle","Math","floor","defined","require","wrap","EPSILON","Number","clamp","min","max","lerp","inverseLerp","abs","toFinite","n","defaultValue","isFinite","expandVector","dims","p","scalar","i","out","lerpArray","length","newArray","initialValue","push","mod","a","b","damp","lambda","dt","exp","fract","sign","degToRad","PI","radToDeg","pingPong","linspace","opts","endpoint","offset","map","_","lerpFrames","values","len","whole","frame","nextFrame","Array","isArray","clamp01","v","smoothstep","x","dampArray","mapRange","inputMin","inputMax","outputMin","outputMax","outVal","expand2D","expand3D","expand4D","random","sketch","points","width","height","margin","sx","sy","firstTime","maxTime","range","context","time","fillStyle","fillRect","fill","gaussian","y","mx","my","r","speedC","seed","getRandomSeed","seedX","seedY","seedR","speedA","seedA","alpha","colorSpeed","maxR","forEach","idx","setSeed","noise1D","rx","ry","beginPath","arc","cos","settings","dimensions","animate"],"mappings":"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","file":"static/js/35.2cad1832.chunk.js","sourcesContent":["module.exports = wrap;\nfunction wrap (value, from, to) {\n  if (typeof from !== 'number' || typeof to !== 'number') {\n    throw new TypeError('Must specify \"to\" and \"from\" arguments as numbers');\n  }\n  // algorithm from http://stackoverflow.com/a/5852628/599884\n  if (from > to) {\n    var t = from;\n    from = to;\n    to = t;\n  }\n  var cycle = to - from;\n  if (cycle === 0) {\n    return to;\n  }\n  return value - cycle * Math.floor((value - from) / cycle);\n}\n","var defined = require('defined');\nvar wrap = require('./lib/wrap');\nvar EPSILON = Number.EPSILON;\n\nfunction clamp (value, min, max) {\n  return min < max\n    ? (value < min ? min : value > max ? max : value)\n    : (value < max ? max : value > min ? min : value);\n}\n\nfunction clamp01 (v) {\n  return clamp(v, 0, 1);\n}\n\nfunction lerp (min, max, t) {\n  return min * (1 - t) + max * t;\n}\n\nfunction inverseLerp (min, max, t) {\n  if (Math.abs(min - max) < EPSILON) return 0;\n  else return (t - min) / (max - min);\n}\n\nfunction smoothstep (min, max, t) {\n  var x = clamp(inverseLerp(min, max, t), 0, 1);\n  return x * x * (3 - 2 * x);\n}\n\nfunction toFinite (n, defaultValue) {\n  defaultValue = defined(defaultValue, 0);\n  return typeof n === 'number' && isFinite(n) ? n : defaultValue;\n}\n\nfunction expandVector (dims) {\n  if (typeof dims !== 'number') throw new TypeError('Expected dims argument');\n  return function (p, defaultValue) {\n    defaultValue = defined(defaultValue, 0);\n    var scalar;\n    if (p == null) {\n      // No vector, create a default one\n      scalar = defaultValue;\n    } else if (typeof p === 'number' && isFinite(p)) {\n      // Expand single channel to multiple vector\n      scalar = p;\n    }\n\n    var out = [];\n    var i;\n    if (scalar == null) {\n      for (i = 0; i < dims; i++) {\n        out[i] = toFinite(p[i], defaultValue);\n      }\n    } else {\n      for (i = 0; i < dims; i++) {\n        out[i] = scalar;\n      }\n    }\n    return out;\n  };\n}\n\nfunction lerpArray (min, max, t, out) {\n  out = out || [];\n  if (min.length !== max.length) {\n    throw new TypeError('min and max array are expected to have the same length');\n  }\n  for (var i = 0; i < min.length; i++) {\n    out[i] = lerp(min[i], max[i], t);\n  }\n  return out;\n}\n\nfunction newArray (n, initialValue) {\n  n = defined(n, 0);\n  if (typeof n !== 'number') throw new TypeError('Expected n argument to be a number');\n  var out = [];\n  for (var i = 0; i < n; i++) out.push(initialValue);\n  return out;\n}\n\nfunction linspace (n, opts) {\n  n = defined(n, 0);\n  if (typeof n !== 'number') throw new TypeError('Expected n argument to be a number');\n  opts = opts || {};\n  if (typeof opts === 'boolean') {\n    opts = { endpoint: true };\n  }\n  var offset = defined(opts.offset, 0);\n  if (opts.endpoint) {\n    return newArray(n).map(function (_, i) {\n      return n <= 1 ? 0 : ((i + offset) / (n - 1));\n    });\n  } else {\n    return newArray(n).map(function (_, i) {\n      return (i + offset) / n;\n    });\n  }\n}\n\nfunction lerpFrames (values, t, out) {\n  t = clamp(t, 0, 1);\n\n  var len = values.length - 1;\n  var whole = t * len;\n  var frame = Math.floor(whole);\n  var fract = whole - frame;\n\n  var nextFrame = Math.min(frame + 1, len);\n  var a = values[frame % values.length];\n  var b = values[nextFrame % values.length];\n  if (typeof a === 'number' && typeof b === 'number') {\n    return lerp(a, b, fract);\n  } else if (Array.isArray(a) && Array.isArray(b)) {\n    return lerpArray(a, b, fract, out);\n  } else {\n    throw new TypeError('Mismatch in value type of two array elements: ' + frame + ' and ' + nextFrame);\n  }\n}\n\nfunction mod (a, b) {\n  return ((a % b) + b) % b;\n}\n\nfunction degToRad (n) {\n  return n * Math.PI / 180;\n}\n\nfunction radToDeg (n) {\n  return n * 180 / Math.PI;\n}\n\nfunction fract (n) {\n  return n - Math.floor(n);\n}\n\nfunction sign (n) {\n  if (n > 0) return 1;\n  else if (n < 0) return -1;\n  else return 0;\n}\n\n// Specific function from Unity / ofMath, not sure its needed?\n// function lerpWrap (a, b, t, min, max) {\n//   return wrap(a + wrap(b - a, min, max) * t, min, max)\n// }\n\nfunction pingPong (t, length) {\n  t = mod(t, length * 2);\n  return length - Math.abs(t - length);\n}\n\nfunction damp (a, b, lambda, dt) {\n  return lerp(a, b, 1 - Math.exp(-lambda * dt));\n}\n\nfunction dampArray (a, b, lambda, dt, out) {\n  out = out || [];\n  for (var i = 0; i < a.length; i++) {\n    out[i] = damp(a[i], b[i], lambda, dt);\n  }\n  return out;\n}\n\nfunction mapRange (value, inputMin, inputMax, outputMin, outputMax, clamp) {\n  // Reference:\n  // https://openframeworks.cc/documentation/math/ofMath/\n  if (Math.abs(inputMin - inputMax) < EPSILON) {\n    return outputMin;\n  } else {\n    var outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);\n    if (clamp) {\n      if (outputMax < outputMin) {\n        if (outVal < outputMax) outVal = outputMax;\n        else if (outVal > outputMin) outVal = outputMin;\n      } else {\n        if (outVal > outputMax) outVal = outputMax;\n        else if (outVal < outputMin) outVal = outputMin;\n      }\n    }\n    return outVal;\n  }\n}\n\nmodule.exports = {\n  mod: mod,\n  fract: fract,\n  sign: sign,\n  degToRad: degToRad,\n  radToDeg: radToDeg,\n  wrap: wrap,\n  pingPong: pingPong,\n  linspace: linspace,\n  lerp: lerp,\n  lerpArray: lerpArray,\n  inverseLerp: inverseLerp,\n  lerpFrames: lerpFrames,\n  clamp: clamp,\n  clamp01: clamp01,\n  smoothstep: smoothstep,\n  damp: damp,\n  dampArray: dampArray,\n  mapRange: mapRange,\n  expand2D: expandVector(2),\n  expand3D: expandVector(3),\n  expand4D: expandVector(4)\n};\n","const random = require('canvas-sketch-util/random');\nconst { lerp } = require('canvas-sketch-util/math');\n\nconst settings = {\n  dimensions: [2048, 2048],\n  animate: true,\n};\n\nconst sketch = ({ width, height }) => {\n  const margin = width * 0.1;\n\n  const sx = v => lerp(margin, width - margin, v);\n  const sy = v => lerp(margin, height - margin, v);\n\n  const totalPoints = 200;\n\n  let firstTime = true;\n\n  let maxTime = random.range(3, 5);\n\n  let points;\n\n  return ({ context, width, height, time }) => {\n    if (time > maxTime) {\n      if (time > maxTime + 3) {\n        maxTime = maxTime + 3 + random.range(3, 8);\n        firstTime = true;\n      }\n      return;\n    }\n    if (firstTime) {\n      context.fillStyle = 'hsl(0, 0%, 98%)';\n      context.fillRect(0, 0, width, height);\n\n      points = new Array(totalPoints).fill(null).map(() => {\n        return {\n          x: random.gaussian() / random.range(5, 10) + 0.5,\n          y: random.gaussian() / random.range(5, 10) + 0.5,\n          mx: random.range(-1, 1),\n          my: random.range(-1, 1),\n          r: random.value(),\n          speedC: random.range(200, 500),\n          seed: random.getRandomSeed(),\n          seedX: random.range(0.5, 3),\n          seedY: random.range(0.5, 3),\n          seedR: random.range(0.5, 3),\n          speedA: random.range(0.5, 3),\n          seedA: random.range(-Math.PI, Math.PI),\n          alpha: random.range(0.3, 0.7),\n          colorSpeed: random.range(20, 60),\n          maxR: 1, // random.value(3,4)\n        };\n      });\n\n      firstTime = false;\n    }\n\n    points.forEach((p, idx) => {\n      const { seed, speedC, mx, my, seedX, seedY, seedR, seedA, speedA, colorSpeed, alpha } = p;\n\n      random.setSeed(seed);\n\n      p.x += random.noise1D(time, seedX) / speedC + mx / 1000;\n      p.y += random.noise1D(time + 1000, seedY) / speedC + my / 1000;\n      p.r = random.noise1D(time + 2000, seedR);\n\n      const rx = sx(p.x);\n      const ry = sy(p.y);\n      const r = Math.abs(p.r) * width * 0.01;\n\n      context.beginPath();\n      context.arc(rx, ry, r, 0, Math.PI * 2, false);\n      context.fillStyle = `hsla(${idx * 10 + time * colorSpeed}, 80%, 50%, ${alpha +\n        Math.cos(time * speedA + seedA) * 0.3})`;\n      context.fill();\n    });\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}