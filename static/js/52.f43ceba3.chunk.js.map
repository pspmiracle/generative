{"version":3,"sources":["sketches/010_rotate_geometry/index.js"],"names":["sketch","a","context","width","height","cubeVertices","cubeEdges","initView","mat4","create","backCanvas","document","createElement","backCanvasContext","getContext","lastTime","forEach","fillStyle","fillRect","pathBuffer","odd","time","drawImage","lineWidth","strokeStyle","path","Path2D","i","modelView","clone","rotateX","Math","cos","rotateY","sin","rotateZ","PI","sF","sqrt","scale","cubeVerticesMorphed","map","p","pT","vec3","transformMat4","edge","eI","pN","pI","moveTo","lineTo","stroke","push","length","slice","settings","dimensions","animate"],"mappings":"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","file":"static/js/52.f43ceba3.chunk.js","sourcesContent":["import { vec3, mat4 } from 'gl-matrix';\n\nconst settings = {\n  dimensions: [1024, 1024],\n  animate: true,\n};\n\nconst sketch = async ({ context, width, height }) => {\n  const cubeVertices = [\n    [-1, -1, +1],\n    [-1, -1, -1],\n    [+1, -1, -1],\n    [+1, -1, +1],\n    [+1, +1, +1],\n    [+1, +1, -1],\n    [-1, +1, -1],\n    [-1, +1, +1],\n  ];\n\n  const cubeEdges = [\n    [0, 7],\n    [0, 3],\n    [0, 1],\n    [6, 7],\n    [6, 5],\n    [6, 1],\n    [2, 5],\n    [2, 1],\n    [2, 3],\n    [4, 3],\n    [4, 5],\n    [4, 7],\n  ];\n\n  const initView = mat4.create();\n\n  const backCanvas = document.createElement('canvas');\n  backCanvas.width = width;\n  backCanvas.height = height;\n  const backCanvasContext = backCanvas.getContext('2d');\n\n  let lastTime = 0;\n\n  [context, backCanvasContext].forEach(context => {\n    context.fillStyle = 'hsla(0, 0%, 98%)';\n    context.fillRect(0, 0, width, height);\n  });\n\n  let pathBuffer = [];\n  let odd = true;\n\n  return ({ context, time }) => {\n    context.drawImage(backCanvas, 0, 0);\n\n    context.lineWidth = 1;\n    context.strokeStyle = 'hsl(0, 0%, 98%)';\n\n    const total = 20;\n    const path = new Path2D();\n    for (let i = 0; i < total; i += 1) {\n      const modelView = mat4.clone(initView);\n\n      mat4.rotateX(modelView, modelView, Math.cos(time) + time / 10);\n      mat4.rotateY(modelView, modelView, Math.sin(time));\n      mat4.rotateZ(modelView, modelView, Math.sin(time + Math.PI / 4));\n      const sF = (Math.cos(time) / 4 + 1.5) / Math.sqrt(i / 2);\n      mat4.scale(modelView, modelView, [sF, sF, sF]);\n\n      context.fillStyle = `hsl(${time}, 80%, 50%)`;\n\n      const cubeVerticesMorphed = cubeVertices.map(p => {\n        const pT = [];\n        vec3.transformMat4(pT, p, modelView);\n\n        return pT;\n      });\n\n      cubeEdges.forEach((edge, eI) => {\n        const lineCoords = edge.map(pN => {\n          return [cubeVerticesMorphed[pN][0] * 100 + width / 2, cubeVerticesMorphed[pN][1] * 100 + width / 2];\n        });\n        lineCoords.forEach((p, pI) => {\n          if (eI === 0 && pI === 0) {\n            path.moveTo(p[0], p[1]);\n          } else {\n            path.lineTo(p[0], p[1]);\n          }\n        });\n      });\n    }\n\n    context.stroke(path);\n\n    if (time - lastTime > 0.04) {\n      pathBuffer.push(path);\n      odd = !odd;\n      if (pathBuffer.length > 2) {\n        pathBuffer = pathBuffer.slice(1);\n      } else {\n        return;\n      }\n\n      lastTime = time;\n\n      backCanvasContext.fillStyle = 'hsla(0, 0%, 10%)';\n      backCanvasContext.fillRect(0, 0, width, height);\n\n      if (odd) {\n        backCanvasContext.lineWidth = 1;\n        backCanvasContext.strokeStyle = '#F00';\n        backCanvasContext.stroke(pathBuffer[1]);\n      } else {\n        backCanvasContext.lineWidth = 1;\n        backCanvasContext.strokeStyle = '#0FF';\n        backCanvasContext.stroke(pathBuffer[0]);\n      }\n    }\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}