{"version":3,"sources":["sketches/037_cells/shaders/frag_main.glsl","sketches/037_cells/shaders/vert.glsl","sketches/037_cells/index.js"],"names":["sketch","gl","regl","update","render","pause","createRegl","quadMesh","createQuad","feedBackTexture","texture","copy","min","mag","drawQuad","frag","fragmentShader","vert","vertexShader","uniforms","iTime","prop","iResolution","iChannel0","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","attributes","position","positions","elements","cells","context","time","width","height","poll","flush","settings","animate"],"mappings":"iHAAA,OAAe,koE,iCCAf,OAAe,0Q,gCCAf,iEAmEe,WAAEA,OAvDF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GACVC,GAD0C,EAA5BC,OAA4B,EAApBC,OAAoB,EAAZC,MACvBC,IAAW,CAAEL,QAEpBM,EAAWC,MAEXC,EAAkBP,EAAKQ,QAAQ,CACnCC,MAAM,EACNC,IAAK,SACLC,IAAK,WAGDC,EAAWZ,EAAK,CACpBa,KAAMC,UACNC,KAAMC,UACNC,SAAU,CACRC,MAAOlB,EAAKmB,KAAK,SACjBC,YAAapB,EAAKmB,KAAK,eACvBE,UAAWd,GAEbe,MAAO,CACLC,QAAQ,EACRC,KAAM,CACJC,OAAQ,YACRC,SAAU,EACVC,OAAQ,sBACRC,SAAU,IAGdC,WAAY,CACVC,SAAUzB,EAAS0B,WAErBC,SAAUhC,EAAKgC,SAAS3B,EAAS4B,SAGnC,MAAO,CACL/B,OADK,YACqC,IAAjCgC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAC7BrC,EAAKsC,OAEL1B,EAAS,CACPM,MAAOiB,EACPf,YAAa,CAACgB,EAAOC,EAAQ,GAC7BhB,UAAWrB,EAAKQ,QAAQ0B,KAG1B3B,EAAgB,CACdE,MAAM,EACNC,IAAK,SACLC,IAAK,WAGPZ,EAAGwC,WAKgBC,SA5DR,CACfN,QAAS,SACTO,SAAS","file":"static/js/44.2d170682.chunk.js","sourcesContent":["export default \"#version 300 es\\n#ifdef GL_ES\\n    precision highp float;\\n    precision highp int;\\n    precision mediump sampler3D;\\n#define GLSLIFY 1\\n#endif\\n#define HW_PERFORMANCE 1\\nuniform vec3      iResolution;\\nuniform float     iTime;\\nuniform float     iChannelTime[4];\\nuniform vec4      iMouse;\\nuniform vec4      iDate;\\nuniform float     iSampleRate;\\nuniform vec3      iChannelResolution[4];\\nuniform int       iFrame;\\nuniform float     iTimeDelta;\\nuniform float     iFrameRate;\\nstruct Channel {\\n    vec3  resolution;\\n    float time;\\n};\\nuniform Channel iChannel[4];\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform sampler2D iChannel3;\\nvoid mainImage( out vec4 c, in vec2 f );\\n\\n// --------- START-SHADER-TOY-CODE-HERE ------------\\n\\n#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\\n\\nvec2 rand( vec2 p ) {\\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\\n}\\n\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\\n{\\n    vec2 ouv = fragCoord/iResolution.xy;\\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\\n    vec2 luv = uv;\\n\\n    uv *= 10. + sin(iTime*.5)*3.;\\n\\n    vec2 iuv = floor(uv);\\n    vec2 guv = fract(uv);\\n\\n    float mDist = 1.0;\\n\\n    vec3 col = vec3(0.);\\n\\n    for (float y= -1.; y <= 1.; y++) {\\n        for (float x= -1.; x <= 1.; x++) {\\n            vec2 neighbor = vec2(x, y);\\n            vec2 point = rand(iuv + neighbor);\\n            point = 0.5 + 0.5*sin(iTime*2. + 6.2831*point);\\n            vec2 diff = neighbor + point - guv;\\n            float dist = length(diff);\\n\\n            mDist = min(mDist, dist);\\n        }\\n    }\\n\\n    float l = length(luv);\\n    col = hue(fract(mDist*.95 + iTime*.1 + l)).rgb;\\n\\n    // fragColor = vec4(col,1.0)*.05 + texture(iChannel0, ouv)*.95;\\n    fragColor = vec4(col,1.0)*.05 + texture(iChannel0, ouv)*.95;\\n}\\n\\n// --------- END-SHADER-TOY-CODE-HERE ------------\\n\\nout vec4 outColor;\\nvoid main( void ) {\\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\\n    mainImage( color, gl_FragCoord.xy );\\n    color.w = 1.0;\\n    outColor = color;\\n}\\n\";","export default \"#version 300 es\\n#ifdef GL_ES\\n    precision highp float;\\n    precision highp int;\\n    precision mediump sampler3D;\\n#define GLSLIFY 1\\n#endif\\nlayout(location = 0) in vec3 position;\\nvoid main() {\\n    gl_Position = vec4(position.xy, 0.0, 1.0);\\n}\\n\";","/* eslint-disable */\nimport createRegl from 'regl';\nimport createQuad from 'primitive-quad';\n\nimport fragmentShader from './shaders/frag_main.glsl';\nimport vertexShader from './shaders/vert.glsl';\n\nconst settings = {\n  context: 'webgl2',\n  animate: true,\n};\n\nconst sketch = ({ gl, update, render, pause }) => {\n  const regl = createRegl({ gl });\n\n  const quadMesh = createQuad();\n\n  const feedBackTexture = regl.texture({\n    copy: true,\n    min: 'linear',\n    mag: 'linear',\n  });\n\n  const drawQuad = regl({\n    frag: fragmentShader,\n    vert: vertexShader,\n    uniforms: {\n      iTime: regl.prop('iTime'),\n      iResolution: regl.prop('iResolution'),\n      iChannel0: feedBackTexture,\n    },\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: 'src alpha',\n        srcAlpha: 1,\n        dstRGB: 'one minus src alpha',\n        dstAlpha: 1,\n      },\n    },\n    attributes: {\n      position: quadMesh.positions,\n    },\n    elements: regl.elements(quadMesh.cells),\n  });\n\n  return {\n    render({ context, time, width, height }) {\n      regl.poll();\n\n      drawQuad({\n        iTime: time,\n        iResolution: [width, height, 1],\n        iChannel0: regl.texture(context),\n      });\n\n      feedBackTexture({\n        copy: true,\n        min: 'linear',\n        mag: 'linear',\n      });\n\n      gl.flush();\n    },\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}