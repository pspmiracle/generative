{"version":3,"sources":["sketches/022_snowman/shaders/snow/frag.glsl"],"names":[],"mappings":"2GAAA,OAAe","file":"static/js/73.1edefd22.chunk.js","sourcesContent":["export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vpos;\\nvarying float hp;\\nvarying float hp2;\\nvarying float hp3;\\n\\nuniform vec2 iResolution;\\nuniform float iTime;\\nuniform float pSize;\\n\\nuniform mat3 uvTransform;\\n\\n#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\\n\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\\n  vec2 uv = (uvTransform * vec3(gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1)).xy - .5;\\n\\n  float t = iTime*.5 + hp; // Делаем время для точки такое же как в vertexShader\\n\\n  float l = length(uv);\\n  float g = l * pSize/2.;\\n  float gx = clamp(.05 / smoothstep(.0, pSize, g), 0., 1.0);\\n  float lim = smoothstep(.5, .3, l);\\n\\n  // Прозрачность считаем от hp3 чтоб все точки были с разной яркостью\\n  fragColor = vec4(hue(hp3*.75 + iTime*hp2).rgb, hp3/(pSize*.25)*gx / g * lim);\\n}\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  mainImage(gl_FragColor, vUv * iResolution.xy);\\n}\\n\";"],"sourceRoot":""}