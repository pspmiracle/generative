{"version":3,"sources":["sketches/016_bloody_canvas_game/Enemy.js","utils/sound.js"],"names":["Enemy","options","Object","entries","key","option","this","live","sizeFactor","random","range","size","baseOptions","fieldSize","particleSize","speed","moveAngle","Math","PI","ship","game","atan2","y","x","cos","sin","sqrt","explode","destroy","maxSpeed","particles","forEach","p","a","max","draw","ctx","onBackground","context","backgroundContext","fillStyle","lineWidth","beginPath","arc","fill","stroke","c","playSound","pick","i","particle","push","enemies","remove","audioCtx","window","AudioContext","webkitAudioContext","frequency","type","volume","o","createOscillator","g","createGain","connect","destination","value","start","gain","exponentialRampToValueAtTime","currentTime","setTimeout","stop","disconnect"],"mappings":"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","file":"static/js/56.00648583.chunk.js","sourcesContent":["import random from 'canvas-sketch-util/random';\nimport { playSound } from '@/utils/sound';\n\nexport default class Enemy {\n  constructor(options) {\n    for (const [key, option] of Object.entries(options)) {\n      this[key] = option;\n    }\n\n    this.live = true;\n    this.sizeFactor = random.range(20, 30);\n    this.size = this.baseOptions.fieldSize * (1 / this.sizeFactor);\n    this.particleSize = this.baseOptions.fieldSize / 100;\n    this.speed = this.baseOptions.fieldSize / (this.sizeFactor * 10);\n\n    this.moveAngle = Math.PI / 2;\n  }\n\n  update() {\n    const {\n      game: { ship },\n    } = this;\n\n    if (this.live) {\n      this.moveAngle = Math.atan2(ship.y - this.y, ship.x - this.x);\n\n      this.x += Math.cos(this.moveAngle) * this.speed;\n      this.y += Math.sin(this.moveAngle) * this.speed;\n\n      const distanceToShip = Math.sqrt((this.x - ship.x) ** 2 + (this.y - ship.y) ** 2);\n      if (distanceToShip < this.size / 2 + ship.size / 2) {\n        ship.explode();\n        this.destroy();\n      }\n    } else {\n      let maxSpeed = 0;\n      this.particles.forEach(p => {\n        p.x += Math.cos(p.a) * p.speed;\n        p.y += Math.sin(p.a) * p.speed;\n        p.speed = Math.max(p.speed - (1 - 1 / p.speed), 1);\n\n        maxSpeed = Math.max(maxSpeed, p.speed);\n\n        return p;\n      });\n      if (maxSpeed <= 1) {\n        this.draw(true);\n        this.destroy();\n      }\n    }\n  }\n\n  draw(onBackground = false) {\n    const {\n      baseOptions: { context, backgroundContext },\n      x,\n      y,\n    } = this;\n\n    let ctx;\n    if (onBackground) {\n      ctx = backgroundContext;\n    } else {\n      ctx = context;\n    }\n\n    if (this.live) {\n      // Body\n      ctx.fillStyle = '#ff6f69';\n      ctx.lineWidth = this.size / 30;\n      ctx.beginPath();\n      ctx.arc(x, y, this.size / 2, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.stroke();\n\n      // Track\n      backgroundContext.fillStyle = 'hsla(0,0%,98%,0.1)';\n      backgroundContext.beginPath();\n      backgroundContext.arc(x, y, this.size / 2, 0, Math.PI * 2);\n      backgroundContext.fill();\n    } else {\n      this.particles.forEach(({ x, y, size, c }) => {\n        ctx.fillStyle = c;\n        ctx.beginPath();\n        ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n        ctx.fill();\n      });\n    }\n  }\n\n  explode() {\n    playSound(random.pick([349.2 + 100, 392.0 + 100, 440.0 + 100]), 'sine', 0.12);\n\n    this.live = false;\n    this.particles = [];\n    for (let i = 0; i < this.sizeFactor * 2; i += 1) {\n      const particle = {\n        x: this.x + random.range(-this.size, this.size),\n        y: this.y + random.range(-this.size, this.size),\n        speed: random.range(5, 10),\n        size: this.particleSize * random.range(0.5, 1.5),\n        c: `hsl(0, 100%,${random.range(40, 60)}%)`,\n      };\n\n      particle.a = Math.atan2(particle.y - this.y, particle.x - this.x);\n\n      this.particles.push(particle);\n    }\n  }\n\n  destroy() {\n    this.game.enemies.remove(this);\n  }\n}\n","const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\nexport function playSound(frequency, type, x, volume = 1) {\n  const o = audioCtx.createOscillator();\n  const g = audioCtx.createGain();\n  o.connect(g);\n  o.type = type;\n  g.connect(audioCtx.destination);\n  o.frequency.value = frequency;\n  o.start();\n  g.gain.value = volume;\n  g.gain.exponentialRampToValueAtTime(0.00001, audioCtx.currentTime + x);\n\n  setTimeout(() => {\n    o.stop();\n    o.disconnect();\n  }, (x + 0.5) * 1000);\n}\n"],"sourceRoot":""}