(this.webpackJsonpgenerative=this.webpackJsonpgenerative||[]).push([[81],{215:function(n,o,f){"use strict";f.r(o),o.default="#define GLSLIFY 1\nuniform float iTime;\nuniform vec2 iResolution;\n\nvarying vec3 vpos;\nvarying vec2 vUv;\n\n#define FOGMODE_NONE 0.\n#define FOGMODE_EXP 1.\n#define FOGMODE_EXP2 2.\n#define FOGMODE_LINEAR 3.\n#define E 2.71828\n\nuniform vec4 vFogInfos;\nuniform vec3 vFogColor;\nvarying float fFogDistance;\n\nfloat CalcFogFactor()\n{\n  float fogCoeff = 1.0;\n  float fogStart = vFogInfos.y;\n  float fogEnd = vFogInfos.z;\n  float fogDensity = vFogInfos.w;\n\n  if (FOGMODE_LINEAR == vFogInfos.x)\n  {\n    fogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\n  }\n  else if (FOGMODE_EXP == vFogInfos.x)\n  {\n    fogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\n  }\n  else if (FOGMODE_EXP2 == vFogInfos.x)\n  {\n    fogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\n  }\n\n  return clamp(fogCoeff, 0.0, 1.0);\n}\n\n  #define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float fog = CalcFogFactor();\n  vec3 color = hue(vpos.y*.2 + .725).rgb;\n  color = fog * color + (1.0 - fog) * vFogColor;\n  fragColor = vec4(color, 1.);\n}\n\nvoid main()\n{\n  mainImage(gl_FragColor, vUv * iResolution.xy);\n}\n"}}]);
//# sourceMappingURL=81.e55af594.chunk.js.map