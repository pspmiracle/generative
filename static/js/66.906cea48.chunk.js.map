{"version":3,"sources":["sketches/020_unstable_sphere/shaders/frag.glsl"],"names":[],"mappings":"2GAAA,OAAe","file":"static/js/66.906cea48.chunk.js","sourcesContent":["export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vpos;\\nvarying float hp;\\nvarying float hp2;\\nvarying float hp3;\\n\\nuniform vec2 iResolution;\\nuniform float iTime;\\nuniform float pSize;\\n\\nuniform mat3 uvTransform;\\n\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\\n  vec2 uv = (uvTransform * vec3(gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1)).xy - .5;\\n\\n  float t = iTime*.5 + hp; // Делаем время для точки такое же как в vertexShader\\n\\n  float g = length(uv) * pSize;\\n  float gx = .05 / smoothstep(.0, pSize, g);\\n\\n  float tr = step(.3, hp2);\\n  if(tr == 0.){\\n    // Для отрывающихся точке будем делать затухание\\n    tr = 1. - fract(t);\\n  }\\n\\n  // Прозрачность считаем от hp3 чтоб все точки были с разной яркостью\\n  fragColor = vec4(vec3(gx) / g, hp3 * tr);\\n}\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  mainImage(gl_FragColor, vUv * iResolution.xy);\\n}\\n\";"],"sourceRoot":""}