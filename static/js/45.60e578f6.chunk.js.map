{"version":3,"sources":["sketches/039_matress/shaders/frag_main.glsl","sketches/039_matress/shaders/vert.glsl","sketches/039_matress/index.js"],"names":["sketch","gl","regl","update","render","pause","createRegl","quadMesh","createQuad","drawQuad","frag","fragmentShader","vert","vertexShader","uniforms","iTime","prop","iResolution","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","attributes","position","positions","elements","cells","context","time","width","height","poll","iChannel0","texture","flush","settings","animate"],"mappings":"mHAAA,OAAe,q/D,iCCAf,OAAe,0Q,gCCAf,iEAsDe,WAAEA,OA1CF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GACVC,GAD0C,EAA5BC,OAA4B,EAApBC,OAAoB,EAAZC,MACvBC,IAAW,CAAEL,QAEpBM,EAAWC,MAEXC,EAAWP,EAAK,CACpBQ,KAAMC,UACNC,KAAMC,UACNC,SAAU,CACRC,MAAOb,EAAKc,KAAK,SACjBC,YAAaf,EAAKc,KAAK,gBAEzBE,MAAO,CACLC,QAAQ,EACRC,KAAM,CACJC,OAAQ,YACRC,SAAU,EACVC,OAAQ,sBACRC,SAAU,IAGdC,WAAY,CACVC,SAAUnB,EAASoB,WAErBC,SAAU1B,EAAK0B,SAASrB,EAASsB,SAGnC,MAAO,CACLzB,OADK,YACqC,IAAjC0B,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAC7B/B,EAAKgC,OAELzB,EAAS,CACPM,MAAOgB,EACPd,YAAa,CAACe,EAAOC,EAAQ,GAC7BE,UAAWjC,EAAKkC,QAAQN,KAG1B7B,EAAGoC,WAKgBC,SA/CR,CACfR,QAAS,SACTS,SAAS","file":"static/js/45.60e578f6.chunk.js","sourcesContent":["export default \"#version 300 es\\n#ifdef GL_ES\\n    precision highp float;\\n    precision highp int;\\n    precision mediump sampler3D;\\n#define GLSLIFY 1\\n#endif\\n#define HW_PERFORMANCE 1\\nuniform vec3      iResolution;\\nuniform float     iTime;\\nuniform float     iChannelTime[4];\\nuniform vec4      iMouse;\\nuniform vec4      iDate;\\nuniform float     iSampleRate;\\nuniform vec3      iChannelResolution[4];\\nuniform int       iFrame;\\nuniform float     iTimeDelta;\\nuniform float     iFrameRate;\\nstruct Channel {\\n    vec3  resolution;\\n    float time;\\n};\\nuniform Channel iChannel[4];\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform sampler2D iChannel3;\\nvoid mainImage( out vec4 c, in vec2 f );\\n\\n// --------- START-SHADER-TOY-CODE-HERE ------------\\n\\n// Original one hosted on https://www.shadertoy.com/view/WljGWh\\n\\n#define STEPS 25.\\n\\nfloat rand(vec2 p)\\n{\\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\\n    p3 += dot(p3, p3.yzx + 33.33);\\n    return fract((p3.x + p3.y) * p3.z);\\n}\\n\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\\n{\\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\\n\\n    float t = iTime;\\n    float col = 0.;\\n    float sStep = 1./STEPS;\\n    float zoomF =  sin(t*.5)*.5+.5;\\n\\n    for(float i = 1.; i>0.01; i-=sStep){\\n        float isf = t*.1;\\n        vec2 iuv = uv * (1. + i * .5) + vec2(cos(isf), sin(isf))*2.;\\n\\n        isf = i*STEPS*.5 - t*5.;\\n        vec2 guv = iuv * (3. + zoomF) + vec2(sin(isf), cos(isf))*.05;\\n        guv = fract(guv) - .5;\\n\\n        float v = abs(i*.5 - length(guv));\\n        float mi = smoothstep(.005, .0, v);\\n\\n        if(mi > 0.){\\n        \\tcol = max(col, 1. - i);\\n        }\\n    }\\n\\n    // col += texture(iChannel0, uv).rgb*.01;\\n\\n    fragColor = vec4(col);\\n}\\n\\n// --------- END-SHADER-TOY-CODE-HERE ------------\\n\\nout vec4 outColor;\\nvoid main( void ) {\\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\\n    mainImage( color, gl_FragCoord.xy );\\n    color.w = 1.0;\\n    outColor = color;\\n}\\n\";","export default \"#version 300 es\\n#ifdef GL_ES\\n    precision highp float;\\n    precision highp int;\\n    precision mediump sampler3D;\\n#define GLSLIFY 1\\n#endif\\nlayout(location = 0) in vec3 position;\\nvoid main() {\\n    gl_Position = vec4(position.xy, 0.0, 1.0);\\n}\\n\";","/* eslint-disable */\nimport createRegl from 'regl';\nimport createQuad from 'primitive-quad';\n\nimport fragmentShader from './shaders/frag_main.glsl';\nimport vertexShader from './shaders/vert.glsl';\n\nconst settings = {\n  context: 'webgl2',\n  animate: true,\n};\n\nconst sketch = ({ gl, update, render, pause }) => {\n  const regl = createRegl({ gl });\n\n  const quadMesh = createQuad();\n\n  const drawQuad = regl({\n    frag: fragmentShader,\n    vert: vertexShader,\n    uniforms: {\n      iTime: regl.prop('iTime'),\n      iResolution: regl.prop('iResolution'),\n    },\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: 'src alpha',\n        srcAlpha: 1,\n        dstRGB: 'one minus src alpha',\n        dstAlpha: 1,\n      },\n    },\n    attributes: {\n      position: quadMesh.positions,\n    },\n    elements: regl.elements(quadMesh.cells),\n  });\n\n  return {\n    render({ context, time, width, height }) {\n      regl.poll();\n\n      drawQuad({\n        iTime: time,\n        iResolution: [width, height, 1],\n        iChannel0: regl.texture(context),\n      });\n\n      gl.flush();\n    },\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}