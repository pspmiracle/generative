(this.webpackJsonpgenerative=this.webpackJsonpgenerative||[]).push([[88],{221:function(n,e,o){"use strict";o.r(e),e.default="precision highp float;\n#define GLSLIFY 1\n\nuniform float iTime;\nuniform vec2 iResolution;\n\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\n// --------- START-SHADER-TOY-CODE-HERE ------------\n\n// Original one hosted on https://www.shadertoy.com/view/tdjXDd\n\n#define PI 3.1415926\n#define TAU 6.2831852\n#define BLACK_COL vec3(24,32,38)/255.\n\n#define rand1(p) fract(sin(p* 78.233)* 43758.5453)\n#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n\n    float SIZE = 4. + cos(iTime*0.2)*0.5;\n    float r = length(uv) * SIZE;\n    r*=floor(iResolution.y/80.);\n    float id = ceil(r);\n    float s = mod(id, 2.)*2. - 1.; // Direction\n    float a = fract(atan(uv.y, uv.x)/TAU + s*(iTime*(rand1(id+400.)*0.5+0.5)*0.2 + id*0.2));\n    float inRange = step(3.,id); // Don's draw center arcs\n    float sm = (1./iResolution.y * 20.* SIZE);\n\n    inRange *= smoothstep(.0, sm, fract(r)) * smoothstep(1.0, 1.0 - sm, fract(r));\n    float arcLength =  (rand1(id)*0.25 + 0.25);\n\n    sm = (sqrt(SIZE)*(1./iResolution.y * 5. / id));\n    inRange *= smoothstep(arcLength, arcLength + sm, a) * smoothstep(1.0, 1. - sm, a);\n\n    vec3 col = hue(rand1(id)).rgb;\n\n    col = mix(BLACK_COL, col, inRange);\n\n    fragColor = vec4(col,1.0);\n}\n\n// --------- END-SHADER-TOY-CODE-HERE ------------\n\nvoid main()\n{\n  mainImage(gl_FragColor, vUv * iResolution.xy);\n}\n"}}]);
//# sourceMappingURL=88.44d26fd9.chunk.js.map