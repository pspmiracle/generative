{"version":3,"sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/index.js"],"names":["ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","create","out","glMatrix","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","scale","rotate","rad","axis","s","c","t","b12","b20","b21","b22","len","hypot","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","sqrt","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","i","arguments","length","mul","sub","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","tempA","tempB","cosine","acos","zero","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","l"],"mappings":"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","file":"static/js/5.76f84bee.chunk.js","sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };"],"sourceRoot":""}