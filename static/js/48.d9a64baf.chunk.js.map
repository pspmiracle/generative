{"version":3,"sources":["unreleased/dots_wave/shaders/frag.glsl","unreleased/dots_wave/shaders/vert.glsl","unreleased/dots_wave/index.js"],"names":["THREE","require","global","sketch","context","viewportWidth","viewportHeight","renderer","WebGLRenderer","canvas","setClearColor","camera","OrthographicCamera","scene","Scene","particles","PlaneGeometry","translate","shaderPoint","ShaderLib","points","uniforms","iTime","value","pSize","iResolution","pMaterial","ShaderMaterial","transparent","depthWrite","blending","NormalBlending","fragmentShader","vertexShader","particleSystem","Points","sortParticles","add","resize","pixelRatio","setPixelRatio","setSize","aspect","updateProjectionMatrix","render","time","dimensions","unload","dispose","settings","animate"],"mappings":"mHAAA,OAAe,kzB,iCCAf,OAAe,qxB,iFCGTA,EAAQC,EAAQ,KAEtBC,EAAOF,MAAQA,EAEfC,EAAQ,KAkEO,WAAEE,OA3DF,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eAClCC,EAAW,IAAIP,EAAMQ,cAAc,CACvCC,OAAQL,EAAQK,SAElBF,EAASG,cAAc,kBAAmB,GAE1C,IAAMC,EAAS,IAAIX,EAAMY,oBAAoB,EAAG,GAAI,EAAG,EAAG,EAAG,KAGvDC,EAAQ,IAAIb,EAAMc,MAElBC,EAAY,IAAIf,EAAMgB,cAAc,IAAK,IAAK,GAAI,IACxDD,EAAUE,UAAU,EAAG,GAAI,GAE3B,IAAMC,EAAclB,EAAMmB,UAAUC,OAC9BC,EAAQ,eACTH,EAAYG,SADH,CAEZC,MAAO,CAAEC,MAAO,GAChBC,MAAO,CAAED,MAAO,IAChBE,YAAa,CAAEF,MAAO,CAAClB,EAAeC,MAIlCoB,EAAY,IAAI1B,EAAM2B,eAAe,CACzCN,WACAO,aAAa,EACbC,YAAY,EAEZC,SAAU9B,EAAM+B,eAChBC,yBACAC,yBAGIC,EAAiB,IAAIlC,EAAMmC,OAAOpB,EAAWW,GAMnD,OALAQ,EAAeE,eAAgB,EAE/BvB,EAAMwB,IAAIH,GAGH,CAELI,OAFK,YAEkD,IAA9CC,EAA6C,EAA7CA,WAAYlC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,eAClCC,EAASiC,cAAcD,GACvBhC,EAASkC,QAAQpC,EAAeC,GAAgB,GAChDK,EAAO+B,OAASrC,EAAgBC,EAChCK,EAAOgC,0BAGTC,OATK,YASyB,IAArBC,EAAoB,EAApBA,KAAoB,EAAdC,WACbpB,EAAUL,SAASC,MAAMC,MAAQsB,EACjCtC,EAASqC,OAAO/B,EAAOF,IAGzBoC,OAdK,WAeHxC,EAASyC,aAKUC,SAhER,CACfC,SAAS,EACT9C,QAAS,W","file":"static/js/48.d9a64baf.chunk.js","sourcesContent":["export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vpos;\\n\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvarying float fogDepth;\\nvarying float size;\\nuniform float fogDensity;\\n\\nuniform mat3 uvTransform;\\n\\n#define PI 3.1415926\\n#define TAU 6.2831852\\n#define BLACK_COL vec3(24, 32, 38) / 255.\\n\\n#define rand1(p) fract(sin(p * 78.233) * 43758.5453)\\n#define hue(h) clamp(abs(fract(h + vec4(3, 2, 1, 0) / 3.) * 6. - 3.) - 1., 0., 1.)\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n    vec2 uv = (uvTransform * vec3(gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1)).xy - .5;\\n\\n    float l = length(uv);\\n    float g = smoothstep(.5, .3, l);\\n\\n    fragColor = vec4(vec3(g * .1), g);\\n}\\n\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n    mainImage(gl_FragColor, vUv * iResolution.xy);\\n}\\n\";","export default \"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec3 vpos;\\nvarying float size;\\n\\nuniform float iTime;\\nuniform float pSize;\\n\\nfloat hash12(vec2 p)\\n{\\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\\n  p3 += dot(p3, p3.yzx + 33.33);\\n  return fract((p3.x + p3.y) * p3.z);\\n}\\n\\nvoid main()\\n{\\n    vUv = uv;\\n    float t = iTime*1.0;\\n\\n    vpos = position;\\n\\n    // vpos.x += hash12(position.xy * 100.)*.05 - .025;\\n    // vpos.y += hash12(position.xy * 200.)*.05 - .025;\\n\\n    float vv = (position.y + position.x)*2. + sin(t)*7.;\\n\\n    vv = (smoothstep(-3.0, 3.0, vv)) * 3.1415*.5;\\n    vv =  sin(vv) * cos(vv);\\n\\n    vv *= .5;\\n    vpos.xy += vv;\\n\\n    size = pSize;\\n    gl_PointSize = pSize;\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(vpos, 1.0);\\n}\\n\";","import fragmentShader from './shaders/frag.glsl';\nimport vertexShader from './shaders/vert.glsl';\n\nconst THREE = require('three');\n\nglobal.THREE = THREE;\n\nrequire('three/examples/js/controls/OrbitControls');\n\nconst settings = {\n  animate: true,\n  context: 'webgl',\n};\n\nconst sketch = ({ context, viewportWidth, viewportHeight }) => {\n  const renderer = new THREE.WebGLRenderer({\n    canvas: context.canvas,\n  });\n  renderer.setClearColor('hsl(0, 0%, 98%)', 1);\n\n  const camera = new THREE.OrthographicCamera(-1, 1, -1, 1, 1, 1000);\n\n  // Setup your scene\n  const scene = new THREE.Scene();\n\n  const particles = new THREE.PlaneGeometry(2.5, 2.5, 25, 25);\n  particles.translate(0, 0, -1);\n\n  const shaderPoint = THREE.ShaderLib.points;\n  const uniforms = {\n    ...shaderPoint.uniforms,\n    iTime: { value: 0 },\n    pSize: { value: 10 },\n    iResolution: { value: [viewportWidth, viewportHeight] },\n    // iResolution: THREE.Uniform(new THREE.Vector2([viewportWidth, viewportHeight])),\n  };\n\n  const pMaterial = new THREE.ShaderMaterial({\n    uniforms,\n    transparent: true,\n    depthWrite: false,\n\n    blending: THREE.NormalBlending,\n    fragmentShader,\n    vertexShader,\n  });\n\n  const particleSystem = new THREE.Points(particles, pMaterial);\n  particleSystem.sortParticles = true;\n\n  scene.add(particleSystem);\n\n  // draw each frame\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight, false);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // Update & render your scene here\n    render({ time, dimensions }) {\n      pMaterial.uniforms.iTime.value = time;\n      renderer.render(scene, camera);\n    },\n    // Dispose of events & renderer for cleaner hot-reloading\n    unload() {\n      renderer.dispose();\n    },\n  };\n};\n\nexport default { sketch, settings };\n"],"sourceRoot":""}